// <auto-generated />
using System;
using MedicalManagement.EntityFramework.Datas;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalManagement.EntityFramework.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MedicalManagement.Domain.Models.DoctorAdviceInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp");

                    b.Property<long>("DoctorInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientInfoId")
                        .HasColumnType("bigint");

                    b.Property<string>("RecordContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DoctorInfoId");

                    b.HasIndex("PatientInfoId");

                    b.ToTable("DoctorAdviceInfos");
                });

            modelBuilder.Entity("MedicalManagement.Domain.Models.DoctorInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EducationalBackground")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("IdCard")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionalTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DoctorInfos");
                });

            modelBuilder.Entity("MedicalManagement.Domain.Models.MedicineInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Catagory")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Specification")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MedicineInfos");
                });

            modelBuilder.Entity("MedicalManagement.Domain.Models.PatientInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Community")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PatientInfos");
                });

            modelBuilder.Entity("MedicalManagement.Domain.Models.PrescriptionInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DoctorAdviceInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("MedicineInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("Number")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DoctorAdviceInfoId");

                    b.HasIndex("MedicineInfoId");

                    b.ToTable("PrescriptionInfos");
                });

            modelBuilder.Entity("UserManagement.Domain.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedicalManagement.Domain.Models.DoctorAdviceInfo", b =>
                {
                    b.HasOne("MedicalManagement.Domain.Models.DoctorInfo", "DoctorInfo")
                        .WithMany()
                        .HasForeignKey("DoctorInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalManagement.Domain.Models.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorInfo");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("MedicalManagement.Domain.Models.PrescriptionInfo", b =>
                {
                    b.HasOne("MedicalManagement.Domain.Models.DoctorAdviceInfo", "DoctorAdviceInfo")
                        .WithMany()
                        .HasForeignKey("DoctorAdviceInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalManagement.Domain.Models.MedicineInfo", "MedicineInfo")
                        .WithMany()
                        .HasForeignKey("MedicineInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorAdviceInfo");

                    b.Navigation("MedicineInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
